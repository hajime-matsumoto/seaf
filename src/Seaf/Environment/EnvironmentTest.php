<?php
namespace Seaf\Environment;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-08 at 07:17:31.
 */
class EnvironmentTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Environment
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Environment;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Seaf\Environment\Environment::__call
     */
    public function testHelper()
    {
        $this->assertEquals(
            'val',
            $this->object->array(array('key'=>'val'))->key
        );

        $this->assertEquals(
            'default',
            $this->object->array(array('key'=>'val'))->setDefault('default')->nonExists
        );
    }

    public function testComponent()
    {
        $this->object->system()->useFake();
        $this->object->system()->halt();
        $this->assertTrue(true);
    }

    public function testRegistry()
    {
        $this->object->set('key','data');
        $this->assertEquals('data',$this->object->get('key'));
    }

    public function testMethodMapping()
    {
        $env = $this->object;

        $env->map('test', function () {
            return true;
        });
        $env->map('test2', function () use ($env) {
            return $env;
        });

        $this->assertTrue($env->test());
        $this->assertEquals(
            $env,
            $env->test2()
        );
    }

    public function testEvent()
    {
        $env = $this->object;

        $res = false;
        $env->event()->on('some',function() use (&$res) {
            $res = true;
        });

        $this->assertFalse($res);

        $env->event()->trigger('some');

        $this->assertTrue($res);
    }

    public function testLog()
    {
        $env = $this->object;
        $log = $env->logHandler(array('type'=>'debugger'))->register();
        $env->debug('a');
    }

    public function testFileLog()
    {
    }
}
